from ast import Pass, Str
from ctypes import Union
import datetime
from email.policy import default
import time
from turtle import update

from django.utils import timezone
from telegram import Bot, ParseMode, Update
from telegram.ext import CallbackContext

from tgbot.handlers.onboarding import static_text, static_state
from tgbot.handlers.utils.info import extract_user_data_from_update
from tgbot.models import User, Cities, Pairs, Periods, Terms, Order, Suggestion, P2p, MerchantsCities
from tgbot.handlers.onboarding.keyboards import make_keyboard_for_start_command
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from tgbot.tasks import broadcast_message
from dtb.settings import BINANCE_API, BINANCE_SECRET

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
def command_start(update: Update, context: CallbackContext):
	u, _ = User.get_user_and_created(update, context)
	state = u.state
	message = get_message_bot(update)
	print(state)
	if state == static_state.S_ACCEPTED_ORDER:
		cmd_accepted_order_show(update, context)
		return
	if state == static_state.S_ACCEPTED_EXCHANGE:
		cmd_accepted_exchange_show(update, context)
		return
	del_mes(update, context, True)
	text = "\n"
	if check_username(update, context, text): # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
		btn_menu = InlineKeyboardButton(text='üìã –ú–µ–Ω—é', callback_data='–ú–µ–Ω—é')
		markup = InlineKeyboardMarkup([
      			[btn_menu]
         ])
		#print(bot.get_chat_member(352482305))
		id = context.bot.send_message(message.chat.id, static_text.START_USER.format(text, message.chat.id), reply_markup=markup, parse_mode="HTML") #–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
		User.set_message_id(update, context, id.message_id)

    # if created:
    #     text = static_text.start_created.format(first_name=u.first_name)
    # else:
    #     text = static_text.start_not_created.format(first_name=u.first_name)

    # update.message.reply_text(text=text, reply_markup=make_keyboard_for_start_command())

## –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def message_handler_func(update: Update, context: CallbackContext):
    state = User.get_user_state(update, context)
    if state in State_Dict:
        func_menu = State_Dict[state]
        func_menu(update, context)
    elif update.message.text in Menu_Dict: #button_message –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–µ
        func_menu = Menu_Dict[update.message.text]
        func_menu(update, context)
    else:
        del_mes(update, context)

def callback_inline(update: Update, context: CallbackContext):
	# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
	# print('callback_inline', update)
	call_list = ['–ì–æ—Ä–æ–¥', '–ü–∞—Ä–∞', '–ü–µ—Ä–∏–æ–¥', '–¢–ò–ü_–ü–∞—Ä—ã', '–ì–æ—Ä–æ–¥_–æ–±–º–µ–Ω–Ω–∏–∫–∞',
              '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å', '–í—ã–±–∏—Ä–∞—é_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ','–ö–ª–∏–µ–Ω—Ç_–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª_—Å–¥–µ–ª–∫—É','–ö–ª–∏–µ–Ω—Ç_–æ—Ç–º–µ–Ω–∏–ª_—Å–¥–µ–ª–∫—É'
    ]
	call = update.callback_query
	if call.message:
		call_func = call.data.split(' ')
		# print(call_func)
		if len(call_func) > 1:
			if call_func[0] in call_list:
					func_menu = Menu_Dict[call_func[0]]
					func_menu(update, context, call_func[1])	
		else:		
			func_menu = Menu_Dict[call.data]
			func_menu(update, context)
	# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
	#elif call.inline_message_id:
	#	func_menu = Menu_Dict[call.data]
	#	func_menu(call, context)

# –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π
def del_mes(update: Update, context: CallbackContext, bot_msg: bool=False): #—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è—é—â–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–¥–µ–ª–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏) –∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ States.S_MENU(–≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å=1)
	message = get_message_bot(update)
	try:
		context.bot.delete_message(message.chat.id, message.message_id)
	except:
		pass
	if bot_msg:
		# time.sleep(0.1)
		try:
			context.bot.delete_message(message.chat.id, int(message.message_id)-1)
		except:
			pass
		# time.sleep(0.1)
		try:
			context.bot.delete_message(message.chat.id, int(message.message_id)-2)
		except:
			pass
		# time.sleep(0.1)
		try:
			context.bot.delete_message(message.chat.id, int(message.message_id)-3)
		except:
			pass
		# time.sleep(0.1)
		try:
			context.bot.delete_message(message.chat.id, int(message.message_id)-4)
		except:
			pass
		# time.sleep(0.1)
		try:
			context.bot.delete_message(message.chat.id, int(message.message_id)-5)
		except:
			pass
		# time.sleep(0.1)
		try:
			context.bot.delete_message(message.chat.id, int(message.message_id)-6)
		except:
			pass

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º message
def get_message_bot(update):
	if hasattr(update, 'message') and update.message != None:
		message = update.message
	if hasattr(update, 'callback_query') and update.callback_query != None:
		message = update.callback_query.message
	return message

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ float
def isfloat(num):
    try:
        float(num)
        return True
    except ValueError:
        return False

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ username
def check_username(update: Update, context: CallbackContext, text = '\n'):
	message = get_message_bot(update)
	if not hasattr(message.chat, 'username') or message.chat.username == '' or message.chat.username == None:
		btn_menu = InlineKeyboardButton(text='üéâ –°—Ç–∞—Ä—Ç', callback_data='–°—Ç–∞—Ä—Ç')
		markup = InlineKeyboardMarkup([
				[btn_menu]
		])
		id = context.bot.send_message(message.chat.id, static_text.NOT_USER_NAME.format(text, message.chat.id), reply_markup=markup) #–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É
		User.set_message_id(update, context, id.message_id)
		return False
	return True

# –ú–µ–Ω—é
def cmd_menu(update: Update, context: CallbackContext):
	del_mes(update, context, True)
	if check_username(update, context):
		message = get_message_bot(update)
		User.set_user_state(update, context, static_state.S_MENU)# –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		buttons = []
		btn_help = InlineKeyboardButton(text='üÜò –ü–æ–º–æ—â—å', callback_data='Help')
		btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–°—Ç–∞—Ä—Ç')
		btn_main = InlineKeyboardButton(text='‚èÆ –í –Ω–∞—á–∞–ª–æ', callback_data='–°—Ç–∞—Ä—Ç')
		btn_client = InlineKeyboardButton(text='üßç‚Äç‚ôÇÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ª–∏—á–∫—É', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
		btn_shop = InlineKeyboardButton(text='üí∏ –Ø –û–±–º–µ–Ω–Ω–∏–∫', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
		buttons.append([btn_client, btn_shop])
		u = User.get_user(update, context)
		if u.is_admin:
			btn_admin = InlineKeyboardButton(text='üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
			buttons.append([btn_admin])
		buttons.append([btn_help])
		buttons.append([btn_main, btn_back])
		markup = InlineKeyboardMarkup(buttons)
		id = context.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏:", reply_markup=markup, parse_mode="HTML")
		User.set_message_id(update, context, id.message_id)

# –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞ ## user_story
def start_client(update: Update, context: CallbackContext):
	del_mes(update, context, True)
	u = User.get_user(update, context)
	if check_username(update, context):
		if u.orders_client == 'None':
			cmd_client(update, context)
			return
		message = get_message_bot(update)
		User.set_user_state(update, context, static_state.S_MENU)# –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		buttons = []
		btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
		btn_client = InlineKeyboardButton(text='üí∏ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data='–ö–ª–∏–µ–Ω—Ç')
		btn_shop = InlineKeyboardButton(text='üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='–ó–∞–∫–∞–∑—ã_–ö–ª–∏–µ–Ω—Ç')
		buttons.append([btn_client, btn_shop])
		buttons.append([btn_back])
		markup = InlineKeyboardMarkup(buttons)
		id = context.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:", reply_markup=markup, parse_mode="HTML")
		User.set_message_id(update, context, id.message_id)

# –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ "–ö–ª–∏–µ–Ω—Ç" - –ì–æ—Ä–æ–¥
def cmd_client(update: Update, context: CallbackContext):
	message = get_message_bot(update)
	del_mes(update, context, True)
	User.set_orders_client(update, context, "yes")	
	User.set_user_state(update, context, static_state.S_MENU)# –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
	cities = Cities.get_obj()
	if len(cities)>= 1: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞
		count = 0
		for element in cities: # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–æ –ø–∏—à–µ–º –ø–æ 2 –≤ —Ä—è–¥.
			count += 1
			merchants_id = list(MerchantsCities.objects.filter(city_id=element['id']).values_list('merchant_id', flat=True))
			merchants = len(list(User.objects.filter(user_id__in=merchants_id, merchant_status='online')))
			if len(cities) == count and len(cities) % 2 != 0: # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —á–µ—Ç–Ω—ã–π –ø–æ–º–µ—â–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
				city = InlineKeyboardButton(element['ru_name']+'    '+str(merchants), callback_data='–ì–æ—Ä–æ–¥ '+element['ru_name'])
				buttons.append([city])
				break
			if count % 2!= 0:
				city_a = InlineKeyboardButton(element['ru_name']+'    '+str(merchants), callback_data='–ì–æ—Ä–æ–¥ '+element['ru_name']) 
			else:
				city_b = InlineKeyboardButton(element['ru_name']+'    '+str(merchants), callback_data='–ì–æ—Ä–æ–¥ '+element['ru_name']) 	
				buttons.append([city_a, city_b])
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "<b>–†—è–¥–æ–º —Å –≥–æ—Ä–æ–¥–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –æ–Ω–ª–∞–π–Ω, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—Ç –í–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–º–æ–≥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—É—á—à—É—é —Å–¥–µ–ª–∫—É.\n\n–í–´–ë–ï–†–ò –ì–û–†–û–î, –í –ö–û–¢–û–†–û–ú –•–û–ß–ï–®–¨ –ü–†–û–ò–ó–í–ï–°–¢–ò –û–ë–ú–ï–ù:</b>", reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ –∏ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã –æ–±–º–µ–Ω–∞
# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≥–æ—Ä–æ–¥
# –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞, —Ç–∏–ø –ø–∞—Ä—ã
def cmd_type_pair(update: Update, context: CallbackContext, city: Str = 'None'):
	message = get_message_bot(update)
	if city == 'None':
		cmd_client(update, context)
		return
	del_mes(update, context, True)
	User.set_city(update, context, city) #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
	User.set_user_state(update, context, static_state.S_MENU)# –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
	pair_a = InlineKeyboardButton('üá∫üá∏ USD (–Ω–∞–ª–∏—á–∫–∞)', callback_data='–¢–ò–ü_–ü–∞—Ä—ã '+'USD')
	pair_b = InlineKeyboardButton('üá±üá∞ LKR (–Ω–∞–ª–∏—á–∫–∞)', callback_data='–¢–ò–ü_–ü–∞—Ä—ã '+'LKR')
	buttons.append([pair_a, pair_b])
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n\n<b>–í–´–ë–ï–†–ò –í–ê–õ–Æ–¢–£ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø:</b>\n\n".format(city), reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–∞—Ä—ã
# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–∏–ø –ø–∞—Ä—ã
# –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
def user_type_pair(update: Update, context: CallbackContext, type_pair: Str = 'None'):
	u, _ = User.get_user_and_created(update, context)
	message = get_message_bot(update)
	if type_pair == 'None':
		cmd_type_pair(update, context, u.city)
		return 
	del_mes(update, context, True)
	User.set_type_pair(update, context, type_pair) #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
	User.set_user_state(update, context, static_state.S_MENU)# –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
	pairs = Pairs.get_obj()
	if len(pairs)>= 1: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞
		for element in pairs: # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–æ –ø–∏—à–µ–º –ø–æ 2 –≤ —Ä—è–¥.
			if element['pair'].split('/')[1] == type_pair:
				pair = InlineKeyboardButton(element['ru_pair'], callback_data='–ü–∞—Ä–∞ '+element['pair'])
				buttons.append([pair])
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n\n<b>–í–´–ë–ï–†–ò –ü–ê–†–£ –î–õ–Ø –û–ë–ú–ï–ù–ê:</b>\n\n".format(u.city), reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞ –∏ –≤—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –†—É–ø–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–µ.
# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–∞—Ä–∞
def cmd_pair(update: Update, context: CallbackContext, pair: Str = 'None'):
	message = get_message_bot(update)	
	if pair == None:
		return user_type_pair(update, context, u.type_pair)
	del_mes(update, context, True)
	User.set_pair(update, context, pair) #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ä—É –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
	User.set_user_state(update, context, static_state.S_ENTERED_PAIR)# –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	u, _ = User.get_user_and_created(update, context)
	pair = Pairs.get_dict()[u.pair]
	city = u.city
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n\n<b>–í–í–ï–î–ò–¢–ï –°–£–ú–ú–£ –¶–ò–§–†–û–ô –î–õ–Ø –û–ë–ú–ï–ù–ê:</b>\n\n".format(city, pair), reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –£—Ç–æ—á–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
# –≤ —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–ø–∞–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def cmd_periods(update: Update, context: CallbackContext, summ: float = 0.0):
	u, _ = User.get_user_and_created(update, context)
	message = get_message_bot(update)
	if summ == 0.0:
		summ = message.text
	if isfloat(summ):
		del_mes(update, context, True)
		User.set_user_state(update, context, static_state.S_MENU)
		User.set_summ(update, context, summ)
		city = u.city
		pair = Pairs.get_dict()[u.pair]
		buttons = []
		btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ö–ª–∏–µ–Ω—Ç')
		periods = Periods.get_obj()
		for element in periods:
			period = InlineKeyboardButton('‚è≥ '+element['ru_period'], callback_data='–ü–µ—Ä–∏–æ–¥ '+element['period'])
			buttons.append([period])
		buttons.append([btn_back])
		markup = InlineKeyboardMarkup(buttons)
		id = context.bot.send_message(message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ <code>{}</code> {}\n\n<b>–ö–ê–ö –ë–´–°–¢–†–û –í–ê–ú –ù–£–ñ–ï–ù –ö–≠–®?</b> ‚è≥".format(city, pair, summ, pair.split(' =>  ')[0]), reply_markup=markup, parse_mode="HTML")
		User.set_message_id(update, context, id.message_id)
	else:
		pair = u.pair
		cmd_pair(update, context, pair)

# –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ –∏ –≤—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω.
# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–µ—Ä–∏–æ–¥
def cmd_accept_order(update: Update, context: CallbackContext, period: str = 'None'):
	u, _ = User.get_user_and_created(update, context)
	message = get_message_bot(update)
	if period == 'None':
		return cmd_periods(update, context, u.summ)
	del_mes(update, context, True)
	User.set_period(update, context, period) #–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –∑–∞–±–µ—Ä–µ–º –∏ –æ—á–∏—Å—Ç–∏–º –ø–æ–ª–µ.
	User.set_user_state(update, context, static_state.S_MENU)
	period = Periods.get_dict()[period]
	city = u.city
	pair = Pairs.get_dict()[u.pair]
	summ = u.summ
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ö–ª–∏–µ–Ω—Ç')
	btn_yes = InlineKeyboardButton(text='‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ', callback_data='–ó–∞—è–≤–∫–∞_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
	btn_no = InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='–ó–∞—è–≤–∫–∞_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
	buttons.append([btn_yes, btn_no])
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±–º–µ–Ω\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ <code>{}</code> {}\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n\n<b>–ü–û–î–¢–í–ï–†–î–ò–¢–ï –ó–ê–Ø–í–ö–£ –ù–ê –û–ë–ú–ï–ù, –í–°–ï –í–ï–†–ù–û?</b>".format(city, pair, summ, pair.split(' =>  ')[0], period), reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)


def cmd_accepted_order_show(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	del_mes(update, context, True)
	city = u.city
	pair = Pairs.get_dict()[u.pair]
	summ = u.summ
	period = Periods.get_dict()[u.period]
	id = context.bot.send_message(message.chat.id, "<b>–í–ê–® –ó–ê–ö–ê–ó\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code></b>\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–∏–Ω —á–∞—Å, –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –æ–±–º–µ–Ω–Ω–∏–∫–∏ —Å–¥–µ–ª–∞—é—Ç —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É.</b>".format(city, pair, pair.split('/')[0], summ, period), parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ –æ–±–º–µ–Ω
def cmd_accepted_order(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	del_mes(update, context, True)
	city = u.city
	pair = Pairs.get_dict()[u.pair]
	summ = u.summ
	period = Periods.get_dict()[u.period]
	timestamp = int(datetime.datetime.today().timestamp())
	timestamp_execut = timestamp + (60*60*1)
	date_time_execut = datetime.datetime.fromtimestamp(timestamp_execut  + (60*60*5.5))
	p2p_last = P2p.objects.latest('timestamp').__dict__
	p2p_last['usdt'] = 1
	pair_dict = Pairs.get_convert_dict()
	exchange_rate = p2p_last[pair_dict[u.pair]]
	order_fee = round ((float(summ) / float(exchange_rate)) * float(Terms.get_dict()['size_fee']), 2)
	o, created = Order.objects.update_or_create(timestamp_execut=timestamp_execut, defaults={
		'client_id' 		: u,
		'city' 	  			: u.city,
		'pair' 	  			: u.pair,
		'summ'				: u.summ,
		'period' 	  		: u.period,
		'date_time_execut'	: date_time_execut,
		'order_fee' 		: order_fee,
		'status' 	  		: 'active'
	})
	if created:
		s = Cities.objects.get(ru_name=u.city)
		user_ids = list(s.city_merchant_ids_set.all().values_list('merchant_id', flat=True)) # –°–ø–∏—Å–æ–∫ –º–µ—Ä—á–∞–Ω—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –≥–æ—Ä–æ–¥–µ
		ids = list(User.objects.filter(user_id__in=user_ids, merchant_status='online').values_list('user_id', flat=True)) # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ—Ä—á–∞–Ω—Ç–æ–≤ = 'online'
		bts = [
			[{ 'text':'üíµ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', 'callback_data':'–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å '+ str(o.id) }],
			[{ 'text':'ü™Å –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'callback_data':'–£–¥–∞–ª–∏—Ç—å' }]
		]
		percent = round(u.count_client_order_success / u.count_client_order * 100, 2)
		# send in async mode via celery
		broadcast_message.delay(
			user_ids=ids,
			text="<b>–ù–û–í–´–ô –û–†–î–ï–†\n–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ \\ –≤—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <code>{} \\ {}   {}%</code>\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n\n –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <code>{}</code> USDT</b>".format(u.count_client_order_success, u.count_client_order, percent, city, pair, pair.split('/')[0], summ, period, order_fee),
			entities=update.callback_query.message.to_dict().get('entities'),
			reply_markup=bts
		)
		User.set_user_state(update, context, static_state.S_ACCEPTED_ORDER)
		id = context.bot.send_message(message.chat.id, "<b>–ê–ö–¢–ò–í–ù–´–ô –û–†–î–ï–†\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code></b>\n\n–í —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –º—ã —Å–æ–±–µ—Ä–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –æ–∂–∏–¥–∞–π—Ç–µ.".format(city, pair, pair.split('/')[0], summ, period), parse_mode="HTML")
		User.set_message_id(update, context, id.message_id)
		return
	cmd_accept_order(update, context, u.period)	



# –∫–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ –æ–±–º–µ–Ω
def cmd_canceled_order(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	u.city = 'None'
	u.type_pair = 'None'
	u.pair = 'None'
	u.summ = 0.0
	u.period = 'None'
	u.save()
	start_client(update, context)
	# u = User.get_user(update, context)
	# u.city = 'None'
	# u.type_pair = 'None'
	# u.pair = 'None'
	# u.summ = 0.0
	# u.period = 'None'
	# u.save()

# –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
def client_orders(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	del_mes(update, context, True)
	User.set_user_state(update, context, static_state.S_MENU)
	for i in u.client_id_order_set.filter(status__in=['exchanged_succesfull', 'exchange']).order_by('timestamp_execut').reverse()[:5]:
		pair = Pairs.get_dict()[i.pair]
		period = Periods.get_dict()[i.period]
		time.sleep(0.2)
		context.bot.send_message(message.chat.id, "<b>–û–†–î–ï–† {}\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code> \n –°–¢–ê–¢–£–° {}</b>\n\n".format(i.merchant_executor_id, i.city, pair, pair.split(' =>  ')[0], i.summ, period, i.status), parse_mode="HTML")
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
def cmd_accepted_merchant_executer(update: Update, context: CallbackContext, orderid_merchantid: str):
	orderid_merchantid = orderid_merchantid.split('_')
	orderid = orderid_merchantid[0]
	merchantid = orderid_merchantid[1]
	m =  User.objects.get(user_id=merchantid)
	message = get_message_bot(update)
	u = User.get_user(update, context)
	del_mes(update, context, True)
	User.set_user_state(update, context, static_state.S_ACCEPTED_EXCHANGE)
	o = Order.objects.get(id=orderid)
	o.merchant_executor_id = m
	o.status = 'exchange'
	o.save()
	m = User.objects.get(user_id=merchantid)
	pair = Pairs.get_dict()[o.pair]
	period = Periods.get_dict()[o.period]
	s = Suggestion.objects.get(order_id=orderid, merchant_executor_id=merchantid)
	text = "<b>–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code></b>".format(o.city, pair, pair.split(' =>  ')[0], o.summ, period)
	text_fee = "\n\n–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <i><b>{} USDT</b></i>".format(o.order_fee)
	pay_summ = "{} {}".format(s.summ, pair.split(' =>  ')[1])
	id = context.bot.send_message(message.chat.id, "<b>–ê–ö–¢–ò–í–ù–´–ô –û–†–î–ï–†</b>\n\n"+text+"\n–í–ê–ú –ó–ê–ü–õ–ê–¢–Ø–¢ "+pay_summ+"\n\n<b>–°–í–Ø–ñ–ò–¢–ï–°–¨ –° –û–ë–ú–ï–ù–ù–ò–ö–û–ú {}, –î–û–ì–û–í–û–†–ò–¢–ï–°–¨ –û –î–ï–¢–ê–õ–Ø–• –í–ê–®–ï–ô –í–°–¢–†–ï–ß–ò</b>".format(m), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å', callback_data='–ö–ª–∏–µ–Ω—Ç_–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª_—Å–¥–µ–ª–∫—É '+orderid)],[InlineKeyboardButton(text='‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å', callback_data='–ö–ª–∏–µ–Ω—Ç_–æ—Ç–º–µ–Ω–∏–ª_—Å–¥–µ–ª–∫—É '+orderid)]]), parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)
	time.sleep(0.2)
	client_name = "–ö–ª–∏–µ–Ω—Ç {}\n".format(u)
	id_m = context.bot.send_message(merchantid, "–ö–õ–ò–ï–ù–¢ –í–´–ë–†–ê–õ –í–ê–®–ï –ü–†–ï–î–õ–û–î–ï–ù–ò–ï\n\n"+client_name+text+text_fee+"\n–í–´ –ó–ê–ü–õ–ê–¢–ò–¢–ï –ö–õ–ò–ï–ù–¢–£ "+pay_summ, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')]]), parse_mode="HTML")
	m.message_id = id_m.message_id
	m.save()

def cmd_accepted_exchange_show(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	del_mes(update, context, True)
	o = u.client_id_order_set.get(status='exchange')
	m = o.merchant_executor_id
	pair = Pairs.get_dict()[o.pair]
	period = Periods.get_dict()[o.period]
	text = "<b>–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code></b>".format(o.city, pair, pair.split(' =>  ')[0], o.summ, period)
	s = Suggestion.objects.get(order_id=o.id, merchant_executor_id=m.user_id)
	pay_summ = "{} {}".format(s.summ, pair.split(' =>  ')[1])
	id = context.bot.send_message(message.chat.id, "<b>–ê–ö–¢–ò–í–ù–´–ô –û–†–î–ï–†</b>\n\n"+text+"\n–í–ê–ú –ó–ê–ü–õ–ê–¢–Ø–¢ "+pay_summ+"\n\n<b>–°–í–Ø–ñ–ò–¢–ï–°–¨ –° –û–ë–ú–ï–ù–ù–ò–ö–û–ú {}, –î–û–ì–û–í–û–†–ò–¢–ï–°–¨ –û –î–ï–¢–ê–õ–Ø–• –í–ê–®–ï–ô –í–°–¢–†–ï–ß–ò</b>".format(m), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å', callback_data='–ö–ª–∏–µ–Ω—Ç_–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª_—Å–¥–µ–ª–∫—É '+str(o.id))],[InlineKeyboardButton(text='‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å', callback_data='–ö–ª–∏–µ–Ω—Ç_–æ—Ç–º–µ–Ω–∏–ª_—Å–¥–µ–ª–∫—É '+str(o.id))]]), parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)


   
def cmd_finnaly_accepted_order(update: Update, context: CallbackContext, orderid: str):
	del_mes(update, context, True)
	message = get_message_bot(update)
	u = User.get_user(update, context)
	o = Order.objects.get(id=orderid)
	o.status = 'exchanged_succesfull'
	o.save()
	m = o.merchant_executor_id
	cmo = m.count_merchant_order
	m.count_merchant_order = cmo + 1
	cmos = m.count_merchant_order_success
	m.count_merchant_order_success = cmos + 1
	m.save()
	cuo = u.count_client_order
	u.count_client_order = cuo + 1
	cuos = u.count_client_order_success
	u.count_client_order_success = cuos + 1	
	id = context.bot.send_message(message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –æ–±–º–µ–Ω–æ–º!!!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')]]), parse_mode="HTML")
	u.message_id = id.message_id
	u.save()

def cmd_finnaly_rejected_order(update: Update, context: CallbackContext, orderid: str):
	del_mes(update, context, True)
	message = get_message_bot(update)
	u = User.get_user(update, context)
	o = Order.objects.get(id=orderid)
	o.status = 'exchanged_rejected'
	o.save()
	m = o.merchant_executor_id
	cmo = m.count_merchant_order
	m.count_merchant_order = cmo + 1
	m.save()
	cuo = u.count_client_order
	u.count_client_order = cuo + 1
	id = context.bot.send_message(message.chat.id, "–°–¥–µ–ª–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç')]]), parse_mode="HTML")
	u.message_id = id.message_id
	u.save()

#####################################
#####################################
#####################################


# –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–Ω–∏–∫–∞ ## merchant_story
def cmd_merchant(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	if u.merchant_client != 'None' and  u.merchant_client != 'under_consideration':
		cmd_menu_merchant(update, context)
		return
	if u.merchant_client == 'under_consideration':
		merchant_terms_of_use_agreed(update, context)
		return
	del_mes(update, context, True)
	User.set_user_state(update, context, static_state.S_MENU)
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
	btn_yes = InlineKeyboardButton(text='‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data='–ü—Ä–∞–≤–∏–ª–∞_—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã')
	btn_no = InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='–ú–µ–Ω—é')
	buttons.append([btn_yes, btn_no])
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–Ω–∞–ª –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –®—Ä–∏-–õ–∞–Ω–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏.\n\n{}\n\n<b>–í–´ –°–û–ì–õ–ê–°–ù–´ –° –£–°–õ–û–í–ò–Ø–ú–ò?</b>".format(Terms.get_dict()['terms_of_use_merchant']), reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞
def merchant_terms_of_use_agreed(update: Update, context: CallbackContext):
	User.set_merchant_client(update, context, 'True') #under_consideration –ü–æ–º–µ–Ω—è—Ç—å –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.
	message = get_message_bot(update)
	u = User.get_user(update, context)
	if u.merchant_client == 'under_consideration':
		del_mes(update, context, True)
		text = '–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å—Ç–∞—Ç—å –æ–±–º–µ–Ω–Ω–∏–∫–æ–º.\n\n!!! –°–í–Ø–ñ–ò–¢–ï–°–¨  –°  @sri_seacher  –î–õ–Ø –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –ü–†–û–í–ï–†–ö–ò –õ–ò–ß–ù–û–°–¢–ò !!!'
		buttons = []
		btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
		buttons.append([btn_back])
		markup = InlineKeyboardMarkup(buttons)
		id = context.bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")
		User.set_message_id(update, context, id.message_id)
		return
	cmd_menu_merchant(update, context)

# –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∏–∑ –±–∞–∑—ã.
def merchant_course(update: Update, context: CallbackContext):
	del_mes(update, context, True)
	message = get_message_bot(update)
	User.set_user_state(update, context, static_state.S_MENU)
	p2p_last = P2p.objects.latest('timestamp').__dict__
	text = '<b><i>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–∞–∑ –≤ —á–∞—Å —Å </i>P2P Binance<i>\n–∏ —Å–ª—É–∂–∞—Ç –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i></b>\n\n<code>{}</code> RUB/USDT  (–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å)\nUSDT/ <code>{}</code> LKR  (–®—Ä–∏-–ª–∞–Ω–∫–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è)\n<code>{}</code> UAH/USDT  (–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ì—Ä–∏–≤–Ω–∞)\n<code>{}</code> EUR/USDT    (–ï–≤—Ä–æ)\n<code>{}</code> USD/USDT    (–î–æ–ª–ª–∞—Ä)\n\n'.format(p2p_last['rub_tinkoff_usdt'], p2p_last['usdt_lkr'], p2p_last['uah_usdt'], p2p_last['eur_revolut_usdt'], p2p_last['usd_tinkoff_usdt'])
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)


# –ú–µ–Ω—é –æ–±–º–µ–Ω–Ω–∏–∫–∞
def cmd_menu_merchant(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	if u.merchant_client == 'None':
		cmd_merchant(update, context)
		return
	del_mes(update, context, True)
	User.set_user_state(update, context, static_state.S_MENU)
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
	btn_course = InlineKeyboardButton(text='üìâüìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç', callback_data='–ö—É—Ä—Å_–≤–∞–ª—é—Ç')
	btn_actual_orders_merchant = InlineKeyboardButton(text='üì• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏', callback_data='–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ_–∑–∞—è–≤–∫–∏')
	btn_orders = InlineKeyboardButton(text='üì® –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='–ó–∞–∫–∞–∑—ã_–ú–µ—Ä—á–∞–Ω—Ç')
	btn_orders_suggestion = InlineKeyboardButton(text='üßßüßæ –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', callback_data='–ú–æ–∏_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
	btn_orders_completed = InlineKeyboardButton(text='‚úÖüßæ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data='–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ_–∑–∞–∫–∞–∑—ã')
	merchant_status = u.merchant_status
	if merchant_status == 'None' or merchant_status == 'pause':
		merchant_status_ru = 'üõã –°—Ç–∞—Ç—É—Å: –ü–∞—É–∑–∞'
		callback = '–°–º–µ–Ω–∞_—Å—Ç–∞—Ç—É—Å–∞'
	if merchant_status == 'online':
		merchant_status_ru = '‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω'
		callback = '–°–º–µ–Ω–∞_—Å—Ç–∞—Ç—É—Å–∞'
	if merchant_status == 'dolg':
		merchant_status_ru = '‚ÄºÔ∏è –°—Ç–∞—Ç—É—Å: –î–æ–ª–≥'
		callback = 'pass'
	btn_status = InlineKeyboardButton(text=merchant_status_ru, callback_data=callback)
	btn_settings = InlineKeyboardButton(text='‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
	buttons.append([btn_settings, btn_status])
	buttons.append([btn_course])
	buttons.append([btn_actual_orders_merchant])
	buttons.append([btn_orders])
	buttons.append([btn_orders_suggestion])
	buttons.append([btn_orders_completed])
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "–ú–ï–ù–Æ –û–ë–ú–ï–ù–ù–ò–ö–ê:\n\n <b>‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω</b> - –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω –∏ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n–ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç –≤–∞—Å –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤.\n\n<b>üõã –°—Ç–∞—Ç—É—Å: –ü–∞—É–∑–∞</b> - –í—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã –Ω–µ –≤–∏–¥–Ω—ã –≤ –≥–æ—Ä–æ–¥–∞—Ö.\n –ù–æ –≤—ã –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è.\n\n<b>‚ÄºÔ∏è –°—Ç–∞—Ç—É—Å: –î–æ–ª–≥</b> - –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≥–∞—Å–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @sri_seacher", reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
def merchant_change_status(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	merchant_status = u.merchant_status
	if merchant_status == 'None' or merchant_status == 'pause':
		u.merchant_status = 'online'
	if merchant_status == 'online':
		u.merchant_status = 'pause'
	u.save()
	cmd_menu_merchant(update, context)

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–Ω–∏–∫–∞.
def merchant_settings(update: Update, context: CallbackContext):
	del_mes(update, context, True)
	message = get_message_bot(update)
	User.set_user_state(update, context, static_state.S_MENU)
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
	btn_yes = InlineKeyboardButton(text='üíµ –ú–æ–∏ –¥–æ–ª–≥–∏', callback_data='–ú–æ–∏_–¥–æ–ª–≥–∏')
	btn_no = InlineKeyboardButton(text='üèò –ú–æ–∏ –≥–æ—Ä–æ–¥–∞', callback_data='–ú–æ–∏_–≥–æ—Ä–æ–¥–∞')
	buttons.append([btn_yes, btn_no])
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞", reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –ú–æ–∏ –≥–æ—Ä–æ–¥–∞
def merchant_cities(update: Update, context: CallbackContext):
	del_mes(update, context, True)
	u = User.get_user(update, context)
	message = get_message_bot(update)
	User.set_user_state(update, context, static_state.S_MENU)
	merchant_city = [ k['city_id'] for k in list(u.merchant_id_cities_set.all().values('city_id')) ] # –ø–æ–ª—É—á–∞–µ–º id –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ–±–º–µ–Ω–Ω–∏–∫–∞
	merchant_cities = Cities.objects.filter(id__in=merchant_city) # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
	cities = Cities.objects.all().order_by('ru_name')
	cities_checked = { obj.ru_name : 'checked' for obj in merchant_cities } # –°–ø–∏—Å–æ–∫ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å–≤–∏—è 
	cities_unchecked = { obj.ru_name : 'unchecked' for obj in cities } # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
	buttons = []
	cities_unchecked.update(cities_checked) # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≥–æ—Ä–æ–¥–∞–º–∏ –ø—Ä–∏—Å—É—Ç—Å–≤–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∏ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
	if len(cities_unchecked)>= 1: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞
		count = 0
		for k in cities_unchecked: # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
			if cities_unchecked[k] == 'checked':
				box = ' ‚úÖ'
			if cities_unchecked[k] == 'unchecked':
				box = ' ‚èπ'
			count += 1
			if len(cities_unchecked) == count and len(cities_unchecked) % 2 != 0: # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —á–µ—Ç–Ω—ã–π, —Ç–æ –ø–æ–º–µ—â–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
				city = InlineKeyboardButton(k + box, callback_data='–ì–æ—Ä–æ–¥_–æ–±–º–µ–Ω–Ω–∏–∫–∞ '+k)
				buttons.append([city])
				break
			if count % 2!= 0: # –µ—Å–ª–∏ —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–æ –ø–∏—à–µ–º –ø–æ 2 –≤ —Ä—è–¥
				city_a = InlineKeyboardButton(k + box, callback_data='–ì–æ—Ä–æ–¥_–æ–±–º–µ–Ω–Ω–∏–∫–∞ '+k) 
			else:
				city_b = InlineKeyboardButton(k + box, callback_data='–ì–æ—Ä–æ–¥_–æ–±–º–µ–Ω–Ω–∏–∫–∞ '+k) 	
				buttons.append([city_a, city_b])
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "–û—Ç–º–µ—Ç—å –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—à—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–±—ä–º–µ–Ω:", reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –ø–æ–º–µ—á–∞–µ–º –≥–æ—Ä–æ–¥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def change_merchat_city(update: Update, context: CallbackContext, city_merchant: str):
	u = User.get_user(update, context)
	c = Cities.objects.get(ru_name=city_merchant)
	try:
		check_city = MerchantsCities.objects.get(merchant_id=u, city_id=c)
		check_city.delete()
	except:
		MerchantsCities.objects.create(merchant_id=u, city_id=c)		
	merchant_cities(update, context)


# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏
def actual_orders(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	del_mes(update, context, True)
	User.set_user_state(update, context, static_state.S_MENU)
	cities_id = list(u.merchant_id_cities_set.all().values_list('city_id_id', flat=True))
	cities = list(Cities.objects.filter(id__in=cities_id).values_list('ru_name', flat=True))
	suggestions = list(u.merchant_executor_id_suggestion_set.all().values_list('order_id', flat=True))
	orders = Order.objects.filter(city__in=cities, status__in=['active', 'mailing'], timestamp_execut__gte=time.time()).exclude(id__in=suggestions).order_by('timestamp_execut')[:5]
	text = '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –ø–æ–∫–∞ –Ω–µ—Ç'
	if u.merchant_status in ['dolg']:
		text = '–£ –≤–∞—Å –Ω–µ –ø–æ–≥–∞—à–µ–Ω –¥–æ–ª–≥, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @sri_seacher'
	try:
		if len(orders) >=1 and u.merchant_status not in ['dolg']:
			for i in orders:
				pair = Pairs.get_dict()[i.pair]
				period = Periods.get_dict()[i.period]
				ts = int(i.timestamp_execut) + (60*60*5.5)
				dt = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
				bts = InlineKeyboardMarkup([
					[InlineKeyboardButton(text='üíµ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å '+ str(i.id))]
				])
				context.bot.send_message(message.chat.id, "<b>–ê–ö–¢–£–ê–õ–¨–ù–´–ô –û–†–î–ï–†\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code></b>\n\n–ê—Ç—É–∞–ª—å–Ω–æ –¥–æ <b>{}</b>\n–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <i><b>{} USDT</b></i>".format(i.city, pair, pair.split(' =>  ')[0], i.summ, period, dt, i.order_fee), reply_markup=bts, parse_mode="HTML")
				time.sleep(0.2)
			text = '<b>–°–î–ï–õ–ê–ô–¢–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–û –ò–ù–¢–ï–†–ï–°–ù–û–ô –í–ê–ú –ó–ê–Ø–í–ö–ï</b>'
	except:
		pass
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)


# –ú–æ–∏ –¥–æ–ª–≥–∏
def merchant_debts(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	del_mes(update, context, True)
	User.set_user_state(update, context, static_state.S_MENU)
	orders = u.merchant_executor_id_order_set.filter(status='exchanged_succesfull', status_fee='not_paid').order_by('timestamp_execut').reverse()[:5]
	text = '–î–æ–ª–≥–æ–≤ –Ω–µ—Ç'
	if len(orders) >=1:
		summ_debt = 0
		for i in orders:
			pair = Pairs.get_dict()[i.pair]
			period = Periods.get_dict()[i.period]
			summ_debt += i.order_fee
			time.sleep(0.2)
			context.bot.send_message(message.chat.id, "<b>–í–´–ü–û–õ–ù–ï–ù–ù–´–ô –û–†–î–ï–†\n–ö–ª–∏–µ–Ω—Ç {}\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code></b>\n\n–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <i><b>{} USDT</b></i>".format(i.client_id, i.city, pair, pair.split(' =>  ')[0], i.summ, period, i.order_fee), parse_mode="HTML")
		text = '<b>–°—É–º–º–∞ –¥–æ–ª–≥–∞ {} USDT</b>\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–≥–∞ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã.\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @sri_seacher'.format(summ_debt)
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)


# –ú–æ–∏ –∑–∞–∫–∞–∑—ã
def merchant_orders(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	del_mes(update, context, True)
	User.set_user_state(update, context, static_state.S_MENU)
	orders = u.merchant_executor_id_order_set.filter(status='exchange', timestamp_execut__lte=time.time()).order_by('timestamp_execut').reverse()[:5]
	text = '–û—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç'
	try:
		if len(orders) >=1:
			text = '–í–µ—Ä–Ω—É—Ç—å—Å—è'
			for i in orders:
				pair = Pairs.get_dict()[i.pair]
				period = Periods.get_dict()[i.period]
				time.sleep(0.2)
				context.bot.send_message(message.chat.id, "<b>–û–†–î–ï–† –í –†–ê–ë–û–¢–ï\n–ö–ª–∏–µ–Ω—Ç {}\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code></b>\n\n".format(i.client_id, i.city, pair, pair.split(' =>  ')[0], i.summ, period), parse_mode="HTML")
	except:
		pass
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –ú–æ–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
def merchant_orders_completed(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	del_mes(update, context, True)
	User.set_user_state(update, context, static_state.S_MENU)
	orders = u.merchant_executor_id_order_set.filter(status='exchanged_succesfull').order_by('timestamp_execut').reverse()[:5]
	text = '–û—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç'
	if len(orders) >=1:
		text = '–í–µ—Ä–Ω—É—Ç—å—Å—è'
		for i in orders:
			pair = Pairs.get_dict()[i.pair]
			period = Periods.get_dict()[i.period]
			time.sleep(0.2)
			context.bot.send_message(message.chat.id, "<b>–í–´–ü–û–õ–ù–ï–ù–ù–´–ô –û–†–î–ï–†\n–ö–ª–∏–µ–Ω—Ç {}\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code></b>\n\n".format(i.client_id, i.city, pair, pair.split(' =>  ')[0], i.summ, period), parse_mode="HTML")
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
def merchant_suggestions(update: Update, context: CallbackContext):
	u = User.get_user(update, context)
	message = get_message_bot(update)
	del_mes(update, context, True)
	User.set_user_state(update, context, static_state.S_MENU)
	suggestions = list(u.merchant_executor_id_suggestion_set.all().values_list('order_id', flat=True))
	orders = Order.objects.filter(id__in=suggestions, status__in=['active', 'mailing'])[:5]
	text = '–û—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç'
	try:
		if len(orders) >=1:
			text = '–í–µ—Ä–Ω—É—Ç—å—Å—è'
			for i in orders:
				pair = Pairs.get_dict()[i.pair]
				period = Periods.get_dict()[i.period]
				sug_text=''
				s = Order.objects.get(id=i.id)
				ts = int(i.timestamp_execut) + (60*60*5.5)
				dt = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
				for sug in s.order_id_suggestion_set.all():
					sug_text += str(sug.summ)+' '+str(pair.split(' =>  ')[1])
					if u == sug.merchant_executor_id:
						sug_text += ' –í–ê–®–ï –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
					sug_text +='\n'
				bts = InlineKeyboardMarkup([
					[InlineKeyboardButton(text='üíµ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å '+ str(i.id))]
				])
				context.bot.send_message(message.chat.id, "<b>–ó–ê–Ø–í–ö–ê –í –ü–†–û–¶–ï–°–°–ï –ü–û–î–ë–û–†–ê –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø:\n\n–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ \\ –≤—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <code>{} \\ {}   {}%</code>\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n\n–ê—Ç—É–∞–ª—å–Ω–æ –¥–æ <b>{}</b>\n\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n{}</b>".format(i.client_id.count_client_order_success, i.client_id.count_client_order, round(i.client_id.count_client_order_success / i.client_id.count_client_order * 100, 2), i.city, pair, pair.split(' =>  ')[0], i.summ, period, dt, sug_text), reply_markup=bts, parse_mode="HTML")
				time.sleep(0.2)
	except:
		pass
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–û–±–º–µ–Ω–Ω–∏–∫')
	buttons.append([btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")
	User.set_message_id(update, context, id.message_id)

# –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—É–º–º—É –Ω–∞ –æ–±–º–µ–Ω
def merchant_suggestion(update: Update, context: CallbackContext, order_id: str = 'None'):
	message = get_message_bot(update)
	User.set_user_state(update, context, static_state.S_ENTERED_SUMM_SUGGESTION)
	o = Order.objects.get(id=int(order_id))
	try:
		city = o.city
		pair = Pairs.get_dict()[o.pair]
		summ = o.summ
		period = Periods.get_dict()[o.period]
		order_fee = o.order_fee
		User.set_merchant_client(update, context, order_id)
		User.set_message_id(update, context, message.message_id)
		text = "<b>–ó–ê–Ø–í–ö–ê –ù–ê –û–ë–ú–ï–ù\n\n–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ <code>{}</code>\n–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞\n<code>{}</code>\n–°—É–º–º–∞ {} <code>{}</code>\n–ö—ç—à –Ω—É–∂–µ–Ω <code>{}</code>\n\n –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É <code>{}</code> USDT\n\n\n –í–í–ï–î–ò–¢–ï –°–£–ú–ú–£ –¶–ò–§–†–û–ô –í {}</b>".format(city, pair, pair.split(' => ')[0], summ, period, order_fee, pair.split(' => ')[1])
		buttons = []
		btn_back = InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è')
		buttons.append([btn_back])
		markup = InlineKeyboardMarkup(buttons)
		context.bot.edit_message_text(chat_id=message.chat.id, text=text, message_id=message.message_id, reply_markup=markup, parse_mode="HTML")
	except:
		#merchant_suggestion_cancel(update, context)
		pass

# –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—É–º–º—ã
def merchant_suggestion_cancel(update: Update, context: CallbackContext):
    User.set_user_state(update, context, static_state.S_MENU)
    del_mes(update, context)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É
def merchant_suggestion_summ(update: Update, context: CallbackContext):
	del_mes(update, context)
	u = User.get_user(update, context)
	message = get_message_bot(update)
	order_id = u.merchant_client
	summ = message.text
	if isfloat(summ):
		o = Order.objects.get(id=int(order_id))
		User.set_user_state(update, context, static_state.S_MENU)
		s, created = Suggestion.objects.update_or_create(order_id=o, merchant_executor_id=u, defaults={
      		'summ':summ
        })
		o.status = 'mailing'
		o.save()
	context.bot.delete_message(message.chat.id, u.message_id)





###################################
###################################
def cmd_help(update: Update, context: CallbackContext):
	del_mes(update, context, True)
	message = get_message_bot(update)
	buttons = []
	btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
	btn_main = InlineKeyboardButton(text='‚èÆ –í –Ω–∞—á–∞–ª–æ', callback_data='–°—Ç–∞—Ä—Ç')
	buttons.append([btn_main, btn_back])
	markup = InlineKeyboardMarkup(buttons)
	id = context.bot.send_message(message.chat.id, "–ü–æ–º–æ—â—å", reply_markup=markup)
	User.set_message_id(update, context, id.message_id)

def cmd_admin(update: Update, context: CallbackContext):
	del_mes(update, context, True)
	u = User.get_user(update, context)
	if u.is_admin:
		message = get_message_bot(update)
		buttons = []
		btn_back = InlineKeyboardButton(text='‚è™ –ù–∞–∑–∞–¥', callback_data='–ú–µ–Ω—é')
		btn_main = InlineKeyboardButton(text='‚èÆ –í –Ω–∞—á–∞–ª–æ', callback_data='–°—Ç–∞—Ä—Ç')
		buttons.append([btn_main, btn_back])
		markup = InlineKeyboardMarkup(buttons)
		id = context.bot.send_message(message.chat.id, "üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:\n–≤—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n<code>{}</code>".format(P2p.pay_trade_history()), reply_markup=markup, parse_mode="HTML")
		User.set_message_id(update, context, id.message_id)
	else:
		command_start(update, context)

def cmd_pass():
	pass

#—Å–ª–æ–≤–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –ú–µ–Ω—é –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
State_Dict = {
    static_state.S_MENU : del_mes, # –ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–æ –ú–µ–Ω—é, –º—ã –º–æ–∂–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏. –õ—é–±–æ–π —Ç–µ–∫—Å—Ç —É–¥–∞–ª—è–µ—Ç—Å—è
    static_state.S_ENTERED_PAIR : cmd_periods,
    static_state.S_ENTERED_SUMM_SUGGESTION : merchant_suggestion_summ, # –û–±–º–µ–Ω–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞
    static_state.S_ACCEPTED_ORDER : del_mes, # –û–∂–∏–¥–∞–µ–º –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥–µ—Ç —á–∞—Å, —á—Ç–æ–± —Å–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å, –¥–æ —ç—Ç–æ–≥–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    static_state.S_ACCEPTED_EXCHANGE : del_mes,
}

#—Å–ª–æ–≤–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –ú–µ–Ω—é
Menu_Dict = {
	'–°—Ç–∞—Ä—Ç': command_start,
	'–ú–µ–Ω—é': cmd_menu,
	'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ': cmd_admin,
	'–ú–µ–Ω—é_–ö–ª–∏–µ–Ω—Ç' : start_client,
	'–ó–∞–∫–∞–∑—ã_–ö–ª–∏–µ–Ω—Ç': client_orders,
	'–ö–ª–∏–µ–Ω—Ç': cmd_client,
	'–ì–æ—Ä–æ–¥' : cmd_type_pair,
	'–¢–ò–ü_–ü–∞—Ä—ã' : user_type_pair,
	'–ü–∞—Ä–∞' : cmd_pair,
	'–ü–µ—Ä–∏–æ–¥' : cmd_accept_order,
	'–ó–∞—è–≤–∫–∞_–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞': cmd_accepted_order,
	'–ó–∞—è–≤–∫–∞_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' : cmd_canceled_order,
	'–í—ã–±–∏—Ä–∞—é_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' : cmd_accepted_merchant_executer,
	'–û–±–º–µ–Ω–Ω–∏–∫': cmd_merchant,
	'–ü—Ä–∞–≤–∏–ª–∞_—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã': merchant_terms_of_use_agreed,
	'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' : merchant_settings,
	'–°–º–µ–Ω–∞_—Å—Ç–∞—Ç—É—Å–∞' : merchant_change_status,
	'–ú–æ–∏_–≥–æ—Ä–æ–¥–∞' : merchant_cities,
	'–ú–æ–∏_–¥–æ–ª–≥–∏' : merchant_debts,
	'–ì–æ—Ä–æ–¥_–æ–±–º–µ–Ω–Ω–∏–∫–∞' : change_merchat_city,
	'–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ_–∑–∞–∫–∞–∑—ã': merchant_orders_completed,
	'–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ_–∑–∞—è–≤–∫–∏': actual_orders,
	'–ó–∞–∫–∞–∑—ã_–ú–µ—Ä—á–∞–Ω—Ç': merchant_orders,
	'–£–¥–∞–ª–∏—Ç—å': del_mes,
	'–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å' : merchant_suggestion,
	'–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' : merchant_suggestion_cancel,
	'–ú–æ–∏_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è': merchant_suggestions,
	'–ö—É—Ä—Å_–≤–∞–ª—é—Ç': merchant_course,
	'pass': cmd_pass,
	'–ö–ª–∏–µ–Ω—Ç_–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª_—Å–¥–µ–ª–∫—É': cmd_finnaly_accepted_order,
	'–ö–ª–∏–µ–Ω—Ç_–æ—Ç–º–µ–Ω–∏–ª_—Å–¥–µ–ª–∫—É': cmd_finnaly_rejected_order,
	'Help': cmd_help,
}


def secret_level(update: Update, context: CallbackContext) -> None:
    # callback_data: SECRET_LEVEL_BUTTON variable from manage_data.py
    """ Pressed 'secret_level_button_text' after /start command"""
    user_id = extract_user_data_from_update(update)['user_id']
    text = static_text.unlock_secret_room.format(
        user_count=User.objects.count(),
        active_24=User.objects.filter(updated_at__gte=timezone.now() - datetime.timedelta(hours=24)).count()
    )

    context.bot.edit_message_text(
        text=text,
        chat_id=user_id,
        message_id=update.callback_query.message.message_id,
        parse_mode=ParseMode.HTML
    )